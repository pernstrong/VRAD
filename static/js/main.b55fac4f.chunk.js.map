{"version":3,"sources":["components/SignIn/SignIn.js","components/AreaCard/AreaCard.js","components/AreasContainer/AreasContainer.js","components/ListingCard/ListingCard.js","components/ListingsContainer/ListingsContainer.js","components/Header/Header.js","components/ListingDetails/ListingDetails.js","components/Favorites/Favorites.js","components/Error/Error.js","components/App/App.js","apiCalls/apiCalls.js","serviceWorker.js","index.js"],"names":["SignIn","props","handleChange","event","target","name","value","setState","handleClick","checkInputs","setUser","state","email","purpose","errorMsg","className","htmlFor","type","id","placeholder","this","onChange","to","onClick","React","Component","AreaCard","location","about","data-id","setCurrentArea","AreasContainer","areas","map","area","render","key","propTypse","PropTypes","array","isRequired","func","ListingCard","imagePath","listing_id","src","alt","setCurrentListing","ListingsContainer","listings","listing","Header","user","activeClassName","numberOfFavorites","resetUser","ListingDetails","details","address","imagePathA","imagePathB","imagePathC","street","favoriteIds","includes","removeFromFavorites","saveToFavorites","beds","baths","cost_per_night","features","feature","Favorites","favorites","length","Error","App","newUser","fetchListings","currentArea","listingId","currentListing","findFavoriteListings","allListings","forEach","favorite","find","push","newFavorites","filter","fetch","then","response","json","data","listingsInArea","reduce","listingObj","area_id","catch","err","console","error","areaData","promises","url","areaDetails","Promise","all","resolvedData","path","exact","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b55fac4f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SignIn.css\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      purpose: \"\",\n      errorMsg: \"\",\n    };\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleClick = (event) => {\n    this.checkInputs()\n      ? this.props.setUser({\n          name: this.state.name,\n          email: this.state.email,\n          purpose: this.state.purpose,\n        })\n      : this.setState({ errorMsg: <p>Please fill in all inputs.</p> });\n  };\n\n  checkInputs = () => {\n    return (\n      this.state.name !== \"\" &&\n      this.state.email !== \"\" &&\n      this.state.purpose !== \"\"\n    );\n  };\n\n  render() {\n    return (\n      <section className=\"signIn-form\">\n        <h2>Welcome, please sign in!</h2>\n        <label htmlFor=\"name\">Enter your name:</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          placeholder=\"Your name\"\n          value={this.state.name}\n          onChange={this.handleChange}\n        />\n        <label htmlFor=\"email\">Enter your email:</label>\n        <input\n          type=\"text\"\n          name=\"email\"\n          id=\"email\"\n          placeholder=\"Your email\"\n          value={this.state.email}\n          onChange={this.handleChange}\n        />\n        <label htmlFor=\"purpose\">Why are you visiting?</label>\n        <select name=\"purpose\" id=\"purpose\" onChange={this.handleChange}>\n          <option value=\"\">-- Please choose a purpose --</option>\n          <option value=\"business\">Business</option>\n          <option value=\"vacation\">Vacation</option>\n          <option value=\"fugitive\">Fugitive on the Run</option>\n          <option value=\"other\">Other</option>\n        </select>\n        <p className=\"error-message\">\n          {this.state.errorMsg}\n        </p>\n        <Link to={this.checkInputs() ? \"/areas\" : \"/\"}>\n          <button className=\"signIn-btn\" onClick={this.handleClick}>\n            Sign In\n          </button>\n        </Link>\n      </section>\n    );\n  }\n}\n\nexport default SignIn;\n\nSignIn.propTypes = {\n  setUser: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport \"./AreaCard.css\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst AreaCard = (props) => {\n  const { id, name, location, about } = props;\n  return (\n    <section className=\"area-card\" data-id={id}>\n      <h2 className=\"area-name\">{name}</h2>\n      <h3>{location}</h3>\n      <p>{about}</p>\n      <Link to={`/areas/${id}`}>\n        <button onClick={() => props.setCurrentArea(id)}>View Listings</button>\n      </Link>\n    </section>\n  );\n};\n\nexport default AreaCard;\n\nAreaCard.propTypes = {\n  setCurrentArea: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport \"./AreasContainer.css\";\nimport AreaCard from \"../AreaCard/AreaCard\";\nimport { Route } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst AreasContainer = (props) => {\n  const areas = props.areas.map((area) => {\n    return (\n      <Route\n        to={`/areas/${area.id}`}\n        render={() => (\n          <AreaCard {...area} setCurrentArea={props.setCurrentArea} />\n        )}\n        key={area.name}\n      />\n    );\n  });\n  return <section className=\"areas-container\">{areas}</section>;\n};\n\nexport default AreasContainer;\n\nAreasContainer.propTypse = {\n  areas: PropTypes.array.isRequired,\n  setCurrentArea: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./ListingCard.css\";\nimport { Link } from \"react-router-dom\";\n\nconst ListingCard = (props) => {\n  const imagePath = `/images/${props.listing_id}_a.jpg`;\n  return (\n    <section className=\"listing-card\">\n      <h2 className=\"listing-name\">{props.name}</h2>\n      <img className=\"listing-img-a\" src={`${imagePath}`} alt={props.name} />\n\n      <Link to={`/listings/${props.listing_id}`}>\n        <button\n          className=\"listing-details-btn\"\n          onClick={() => props.setCurrentListing(props.listing_id)}\n        >\n          Listing Details\n        </button>\n      </Link>\n    </section>\n  );\n};\n\nexport default ListingCard;\n\nListingCard.propTypes = {\n   listing: PropTypes.object,\n   setCurrentListing: PropTypes.func\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./ListingsContainer.css\";\nimport ListingCard from \"../ListingCard/ListingCard\"\n// import { Route } from 'react-router-dom'\n\nconst ListingsContainer = (props) => {\n  const listings = props.listings.map((listing) => {\n    return (\n      <ListingCard\n        key={listing.listing_id}\n        {...listing}\n        setCurrentListing={props.setCurrentListing}\n      />\n    );\n  });\n\n  return <section className=\"listings-container\">{listings}</section>;\n};\n\nexport default ListingsContainer;\n\nListingsContainer.propTypes = {\n  listings: PropTypes.arrayOf(PropTypes.object),\n  setCurrentListing: PropTypes.func\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Header.css\";\nimport { Link, NavLink } from \"react-router-dom\";\n\nconst Header = (props) => {\n  const userMessage = () => {\n    return (\n      <section className=\"message-section\">\n          <h3>Guest Details</h3>\n        <section className=\"guest-details\">\n          <p>User: {props.user.name}</p>\n          <p>Trip Purpose: {props.user.purpose}</p>\n        </section>\n        <section className=\"btn-section\">\n          <NavLink to=\"/favorites\" activeClassName='my-favorites-btn-active'>\n            <button className='my-favorites-btn'>\n            My Favorites ({props.numberOfFavorites})\n            </button>\n          </NavLink>\n          <Link to=\"/\">\n            <button onClick={() => props.resetUser()}>Sign Out</button>\n          </Link>\n        </section>\n      </section>\n    );\n  };\n\n  return (\n    <header>\n      <section className='vrad'>\n      <Link className='accronym-link' to={!props.user.name ? '/' : \"/areas\"}>\n        <h1>V.R.A.D.</h1>\n      </Link>\n        <p className=\"acronym\">Vacation Rentals Around Denver</p>\n      </section>\n        {props.user && <h2 className=\"welcome-msg\">Welcome to Denver!</h2>}\n      {props.user && userMessage()}\n    </header>\n  );\n};\n\nexport default Header;\n\nHeader.propTypes = {\n  user: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  resetUser: PropTypes.func,\n  numberOfFavorites: PropTypes.number\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./ListingDetails.css\";\n\nconst ListingDetails = (props) => {\n  const { name, address, details } = props.details;\n  const imagePathA = `/images/${props.details.listing_id}_a.jpg`;\n  const imagePathB = `/images/${props.details.listing_id}_b.jpg`;\n  const imagePathC = `/images/${props.details.listing_id}_c.jpg`;\n\n  return (\n    <section className=\"listing-details\">\n    <div className=\"details-header\">\n    <div className=\"name-address\">\n      <h2 className=\"listing-name\">{name}</h2>\n      <p className=\"listing-address\">\n        {address.street} {address.street}\n      </p>\n      </div>\n      <button\n        className=\"favorites-btn\"\n        onClick={() =>\n          props.favoriteIds.includes(props.details.listing_id)\n            ? props.removeFromFavorites(props.details.listing_id)\n            : props.saveToFavorites(props.details.listing_id)\n        }\n      >\n        {props.favoriteIds.includes(props.details.listing_id)\n          ? \"Remove from Favorites\"\n          : \"Add to Favorites\"}\n      </button>\n      </div>\n      <div className=\"details\">\n      <h3>Details</h3>\n      <p className=\"detail\">Bedrooms: {details.beds}</p>\n      <p className=\"detail\">Bathrooms: {details.baths}</p>\n      <p className=\"detail\">Cost per Night: ${details.cost_per_night}</p>\n      </div>\n      <div className=\"features\">\n      <h3>Features</h3>\n      <ul className=\"features\">\n        {details.features.map((feature) => {\n          return (\n            <li className=\"feature\" key={feature}>\n              {feature}\n            </li>\n          );\n        })}\n      </ul>\n      </div>\n      <div className=\"images\">\n        <img className=\"listing-img\" src={`${imagePathA}`} alt={props.name} />\n        <img className=\"listing-img\" src={`${imagePathB}`} alt={props.name} />\n        <img className=\"listing-img\" src={`${imagePathC}`} alt={props.name} />\n      </div>\n    </section>\n  );\n};\n\nexport default ListingDetails;\n\nListingDetails.propTypes = {\n  details: PropTypes.object,\n  saveToFavorites: PropTypes.func,\n  removeFromFavorites: PropTypes.func,\n};\n","import React from \"react\";\nimport \"./Favorites.css\";\nimport ListingCard from \"../ListingCard/ListingCard\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst Favorites = (props) => {\n  const favorites = props.favorites.map((listing) => {\n    return (\n      <ListingCard\n        key={listing.listing_id}\n        {...listing}\n        setCurrentListing={props.setCurrentListing}\n      />\n    );\n  });\n  return (\n    <section className=\"favorites-container\">\n    <div className=\"favorites-header\">\n      <h2>My Favorites</h2>\n      <Link to=\"/areas\">\n        <button>Return to Areas</button>\n      </Link>\n      </div>\n      {props.favorites.length === 0 && (\n        <p>You have no favorites yet. Favorite a listing!</p>\n      )}\n      {favorites}\n    </section>\n  );\n};\n\nexport default Favorites;\n\nFavorites.propTypes = {\n  listings: PropTypes.array.isRequired,\n  setCurrentListing: PropTypes.func.isRequired,\n};\n","import React from 'react'\nimport './Error.css'\nconst Error = () => {\n\n    return(\n        <section className='error-section'>\n           <h2>Error 404</h2> \n           <p>You've reached a page that does not exist...please try again.</p>\n        </section>\n    )\n}\n\nexport default Error","import React from \"react\";\nimport \"./App.css\";\nimport SignIn from \"../SignIn/SignIn\";\nimport AreasContainer from \"../AreasContainer/AreasContainer\";\nimport ListingsContainer from \"../ListingsContainer/ListingsContainer\";\nimport Header from \"../Header/Header\";\nimport ListingDetails from \"../ListingDetails/ListingDetails\";\nimport Favorites from \"../Favorites/Favorites\";\nimport Error from '../Error/Error'\nimport { fetchAreasData, fetchListingsData } from \"../../apiCalls/apiCalls\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      user: \"\",\n      areas: [],\n      listings: [],\n      currentArea: \"\",\n      currentListing: \"\",\n      favorites: [],\n    };\n  }\n\n  setUser = (newUser) => {\n    this.setState({ user: newUser });\n    this.fetchListings();\n  };\n\n  resetUser = () => {\n    this.setState({ user: \"\", favorites: [] });\n  };\n\n  setCurrentArea = (area) => {\n    this.setState({ currentArea: area });\n  };\n\n  setCurrentListing = (listingId) => {\n    this.setState({ currentListing: listingId });\n  };\n\n  saveToFavorites = (listingId) => {\n    if (!this.state.favorites.includes(listingId)) {\n      this.setState({ favorites: [...this.state.favorites, listingId] });\n    }\n  };\n\n  findFavoriteListings = () => {\n    const allListings = [\n      ...this.state.listings[\"590\"],\n      ...this.state.listings[\"751\"],\n      ...this.state.listings[\"408\"],\n      ...this.state.listings[\"240\"],\n    ];\n    const favorites = [];\n    this.state.favorites.forEach((favorite) => {\n      const listing = allListings.find(\n        (listing) => listing.listing_id === favorite\n      );\n      favorites.push(listing);\n    });\n    return favorites;\n  };\n\n  removeFromFavorites = (listingId) => {\n    const newFavorites = this.state.favorites.filter(\n      (favorite) => favorite !== listingId\n    );\n    this.setState({ favorites: newFavorites });\n  };\n\n  componentDidMount() {\n    fetchAreasData()\n      .then((resolvedData) => this.setState({ areas: resolvedData }))\n      .catch((err) => console.error(err));\n  }\n\n  fetchListings = () => {\n    fetchListingsData()\n      .then((data) => {\n        const listingsInArea = data.listings.reduce(\n          (listingObj, listing) => {\n            listingObj[listing.area_id].push(listing);\n            return listingObj;\n          },\n          { \"590\": [], \"751\": [], \"408\": [], \"240\": [] }\n        );\n        this.setState({ listings: listingsInArea });\n      })\n      .catch((err) => console.error(err));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n       <Header\n          user={this.state.user}\n          resetUser={this.resetUser}\n          numberOfFavorites={this.state.favorites.length}\n        />\n\n      <Switch>\n        <Route\n            path={`/VRAD/listings/${this.state.currentListing}`}\n            render={() => {\n              const currentListing = this.state.listings[\n                this.state.currentArea\n              ].find(\n                (listing) => listing.listing_id === this.state.currentListing\n              );\n              return (\n                <ListingDetails\n                  details={currentListing}\n                  saveToFavorites={this.saveToFavorites}\n                  removeFromFavorites={this.removeFromFavorites}\n                  favoriteIds={this.state.favorites}\n                />\n              );\n            }}\n          />\n           <Route\n            exact\n            path=\"/VRAD/areas\"\n            render={() => {\n              return (\n                <AreasContainer\n                  areas={this.state.areas}\n                  setCurrentArea={this.setCurrentArea}\n                />\n              );\n            }}\n        />\n          <Route\n          exact\n          path={`/VRAD/areas/${this.state.currentArea}`}\n          render={() => {\n            return (\n              <ListingsContainer\n                listings={\n                  this.state.currentArea !== \"\"\n                    ? this.state.listings[this.state.currentArea]\n                    : []\n                }\n                setCurrentListing={this.setCurrentListing}\n              />\n            );\n          }}\n        />\n        <Route\n          path={\"/VRAD/favorites\"}\n          render={() => {\n            return (\n              <Favorites\n                favorites={this.findFavoriteListings()}\n                setCurrentListing={this.setCurrentListing}\n              />\n            );\n          }}\n        />\n        <Route\n          exact\n          path=\"/VRAD/\"\n          render={() => {\n            return <SignIn setUser={this.setUser} />;\n          }}\n        />\n        <Route\n          path=\"/VRAD/error\"\n          render={() => <Error />}\n        />\n        <Redirect to=\"/error\"/>\n\n      </Switch>\n       \n        \n        \n        \n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const fetchAreasData = () => {\n  return fetch(\"https://vrad-api.herokuapp.com/api/v1/areas\")\n    .then((response) => response.json())\n    .then((areaData) => {\n      const promises = areaData.areas.map((area) => {\n        let url = `https://vrad-api.herokuapp.com${area.details}`;\n        return fetch(url)\n          .then((response) => response.json())\n          .then((areaDetails) => areaDetails);\n      });\n      return Promise.all(promises);\n    });\n};\n\nexport const fetchListingsData = () => {\n  return fetch(\"https://vrad-api.herokuapp.com/api/v1/listings/\").then((response) => response.json());\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}